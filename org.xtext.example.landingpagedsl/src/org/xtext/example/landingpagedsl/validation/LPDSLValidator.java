/*
 * generated by Xtext 2.23.0.M3
 */
package org.xtext.example.landingpagedsl.validation;
import java.util.*; 
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.xtext.example.landingpagedsl.lPDSL.ImagePath;
import org.xtext.example.landingpagedsl.lPDSL.LPDSLPackage;
import org.xtext.example.landingpagedsl.lPDSL.LandingPage;
import org.xtext.example.landingpagedsl.lPDSL.PageBody;
import org.xtext.example.landingpagedsl.lPDSL.PageComponent;
import org.xtext.example.landingpagedsl.lPDSL.PageHeader;
import org.xtext.example.landingpagedsl.lPDSL.Path;
import org.xtext.example.landingpagedsl.lPDSL.Sections;
import org.xtext.example.landingpagedsl.lPDSL.TabItems;
import java.util.regex.*;
/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class LPDSLValidator extends AbstractLPDSLValidator {
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Check(CheckType.NORMAL)
	public void tabHasSection (LandingPage page) {
		List tabNames = new ArrayList();
		List secNames = new ArrayList();
		for(PageComponent p : page.getPagecomponent()) {
			for(EObject t : p.eContents()) {
				if (t.getClass().getSimpleName().toString().equals("TabItemsImpl")) {
					var eClass = t.eClass();
					var structuralFeature = eClass.getEStructuralFeature("name");
					var nodes = NodeModelUtils.findNodesForFeature(t, structuralFeature);
					for(var node : nodes) {
						tabNames.add(node.getText());
					}
				}
			}
		}

		for(PageComponent p : page.getPagecomponent()) {
			for(EObject t : p.eContents()) {
				if (t.getClass().getSimpleName().toString().equals("ResumeImpl") ||
						t.getClass().getSimpleName().toString().equals("AboutMeImpl") ||
						t.getClass().getSimpleName().toString().equals("PictureCarouselImpl") ||
						t.getClass().getSimpleName().toString().equals("ContactInformationImpl") ||
						t.getClass().getSimpleName().toString().equals("LinksImpl")) {
					var eClass = t.eClass();
					var structuralFeature = eClass.getEStructuralFeature("name");
					var nodes = NodeModelUtils.findNodesForFeature(t, structuralFeature);
					for(var node : nodes) {
						secNames.add(node.getText());
					}
				}
			}
		}
		
		for(var s : tabNames) {
			if(!secNames.contains(s)) {
				error("Each Tab has to have a corresponding section with the same name!", LPDSLPackage.Literals.LANDING_PAGE__PAGECOMPONENT);
			}
		}
	}
	
	@Check
	public void uniqueTabNames(PageHeader header) {
		List tabNames = new ArrayList();
		for(TabItems t : header.getTabs()) {
			tabNames.add(t.getName());
		}
		Set set = new HashSet(tabNames);
		if(set.size() < tabNames.size()) {
			error("Tabs must have unique names!", LPDSLPackage.Literals.PAGE_HEADER__TABS);
		}
	}
	
	@Check
	public void uniqueSectionNames(PageBody body) {
		List secNames = new ArrayList();
		for(Sections s : body.getSections()) {
			secNames.add(s.getName());
		}
		Set set = new HashSet(secNames);
		if(set.size() < secNames.size()) {
			error("Sections must have unique names!", LPDSLPackage.Literals.PAGE_BODY__SECTIONS);
		}
	}
	
	
	@Check
	public void checkOnePageBody(LandingPage page) {
		int check = 0;
		for(PageComponent component : page.getPagecomponent()) {
			if (component.getClass().getSimpleName().toString().equals("PageBodyImpl")) {
				check += 1;
			}
		}
		if(check > 1) {
			error("There can only be one body section in your landing page!", LPDSLPackage.Literals.LANDING_PAGE__PAGECOMPONENT);
		}
	}
	
	@Check
	public void checkOnePageHeader(LandingPage page) {
		int check = 0;
		for(PageComponent component : page.getPagecomponent()) {
			if (component.getClass().getSimpleName().toString().equals("PageHeaderImpl")) {
				check += 1;
			}
		}
		if(check > 1) {
			error("There can only be one header section in your landing page!", LPDSLPackage.Literals.LANDING_PAGE__PAGECOMPONENT);
		}
	}
	
	@Check
	public void checkOnePageFooter(LandingPage page) {
		int check = 0;
		for(PageComponent component : page.getPagecomponent()) {
			if (component.getClass().getSimpleName().toString().equals("PageFooterImpl")) {
				check += 1;
			}
		}
		if(check > 1) {
			error("There can only be one footer section in your landing page!", LPDSLPackage.Literals.LANDING_PAGE__PAGECOMPONENT);
		}
	}
	
	@Check 
	public void validURL(Path path) {
		Pattern p = Pattern.compile("^(http:\\/\\/|https:\\/\\/)?(www.)([a-zA-Z0-9]+).[a-zA-Z0-9]*.[a-z]{3}.?([a-z]+)?$");
		Matcher m = p.matcher(path.getValue());
		if (!m.matches()){
			warning("Your URL might not be valid!", LPDSLPackage.Literals.PATH__VALUE);
		}
		
				
	}
	
	@Check 
	public void validImagePath(ImagePath path) {
		Pattern p = Pattern.compile("([^\\s]+(\\.(?i)(jpg|png|JPG|PNG))$)");
		Matcher m = p.matcher(path.getValue());
		if (!m.matches()){
			warning("Your image path might not be valid!", LPDSLPackage.Literals.IMAGE_PATH__VALUE);
		}
		
				
	}
}
