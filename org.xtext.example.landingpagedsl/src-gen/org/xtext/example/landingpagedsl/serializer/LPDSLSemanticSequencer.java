/*
 * generated by Xtext 2.23.0.M3
 */
package org.xtext.example.landingpagedsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.landingpagedsl.lPDSL.AboutMe;
import org.xtext.example.landingpagedsl.lPDSL.ContactInformation;
import org.xtext.example.landingpagedsl.lPDSL.Description;
import org.xtext.example.landingpagedsl.lPDSL.ImagePath;
import org.xtext.example.landingpagedsl.lPDSL.Items;
import org.xtext.example.landingpagedsl.lPDSL.LPDSLPackage;
import org.xtext.example.landingpagedsl.lPDSL.LandingPage;
import org.xtext.example.landingpagedsl.lPDSL.LinkItem;
import org.xtext.example.landingpagedsl.lPDSL.Links;
import org.xtext.example.landingpagedsl.lPDSL.PageBody;
import org.xtext.example.landingpagedsl.lPDSL.PageFooter;
import org.xtext.example.landingpagedsl.lPDSL.PageHeader;
import org.xtext.example.landingpagedsl.lPDSL.Path;
import org.xtext.example.landingpagedsl.lPDSL.Picture;
import org.xtext.example.landingpagedsl.lPDSL.PictureCarousel;
import org.xtext.example.landingpagedsl.lPDSL.Resume;
import org.xtext.example.landingpagedsl.lPDSL.ResumeItems;
import org.xtext.example.landingpagedsl.lPDSL.ResumeSection;
import org.xtext.example.landingpagedsl.lPDSL.TabItems;
import org.xtext.example.landingpagedsl.lPDSL.TimeSpecifier;
import org.xtext.example.landingpagedsl.lPDSL.URL;
import org.xtext.example.landingpagedsl.services.LPDSLGrammarAccess;

@SuppressWarnings("all")
public class LPDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LPDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LPDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LPDSLPackage.ABOUT_ME:
				sequence_AboutMe(context, (AboutMe) semanticObject); 
				return; 
			case LPDSLPackage.CONTACT_INFORMATION:
				sequence_ContactInformation(context, (ContactInformation) semanticObject); 
				return; 
			case LPDSLPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case LPDSLPackage.IMAGE_PATH:
				sequence_ImagePath(context, (ImagePath) semanticObject); 
				return; 
			case LPDSLPackage.INTEGER:
				sequence_Integer(context, (org.xtext.example.landingpagedsl.lPDSL.Integer) semanticObject); 
				return; 
			case LPDSLPackage.ITEMS:
				sequence_Items(context, (Items) semanticObject); 
				return; 
			case LPDSLPackage.LANDING_PAGE:
				sequence_LandingPage(context, (LandingPage) semanticObject); 
				return; 
			case LPDSLPackage.LINK_ITEM:
				sequence_LinkItem(context, (LinkItem) semanticObject); 
				return; 
			case LPDSLPackage.LINKS:
				sequence_Links(context, (Links) semanticObject); 
				return; 
			case LPDSLPackage.PAGE_BODY:
				sequence_PageBody(context, (PageBody) semanticObject); 
				return; 
			case LPDSLPackage.PAGE_FOOTER:
				sequence_PageFooter(context, (PageFooter) semanticObject); 
				return; 
			case LPDSLPackage.PAGE_HEADER:
				sequence_PageHeader(context, (PageHeader) semanticObject); 
				return; 
			case LPDSLPackage.PATH:
				sequence_Path(context, (Path) semanticObject); 
				return; 
			case LPDSLPackage.PICTURE:
				sequence_Picture(context, (Picture) semanticObject); 
				return; 
			case LPDSLPackage.PICTURE_CAROUSEL:
				sequence_PictureCarousel(context, (PictureCarousel) semanticObject); 
				return; 
			case LPDSLPackage.RESUME:
				sequence_Resume(context, (Resume) semanticObject); 
				return; 
			case LPDSLPackage.RESUME_ITEMS:
				sequence_ResumeItems(context, (ResumeItems) semanticObject); 
				return; 
			case LPDSLPackage.RESUME_SECTION:
				sequence_ResumeSection(context, (ResumeSection) semanticObject); 
				return; 
			case LPDSLPackage.TAB_ITEMS:
				sequence_TabItems(context, (TabItems) semanticObject); 
				return; 
			case LPDSLPackage.TIME_SPECIFIER:
				sequence_TimeSpecifier(context, (TimeSpecifier) semanticObject); 
				return; 
			case LPDSLPackage.URL:
				sequence_URL(context, (URL) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Sections returns AboutMe
	 *     AboutMe returns AboutMe
	 *
	 * Constraint:
	 *     (name=ID picture+=Picture description+=Items)
	 */
	protected void sequence_AboutMe(ISerializationContext context, AboutMe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sections returns ContactInformation
	 *     ContactInformation returns ContactInformation
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ContactInformation(ISerializationContext context, ContactInformation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LPDSLPackage.Literals.SECTIONS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LPDSLPackage.Literals.SECTIONS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContactInformationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LPDSLPackage.Literals.DESCRIPTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LPDSLPackage.Literals.DESCRIPTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ImagePath returns ImagePath
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ImagePath(ISerializationContext context, ImagePath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LPDSLPackage.Literals.IMAGE_PATH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LPDSLPackage.Literals.IMAGE_PATH__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImagePathAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer returns Integer
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Integer(ISerializationContext context, org.xtext.example.landingpagedsl.lPDSL.Integer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LPDSLPackage.Literals.INTEGER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LPDSLPackage.Literals.INTEGER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Items returns Items
	 *
	 * Constraint:
	 *     (name=ID description+=Description)
	 */
	protected void sequence_Items(ISerializationContext context, Items semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LandingPage returns LandingPage
	 *
	 * Constraint:
	 *     pagecomponent+=PageComponent+
	 */
	protected void sequence_LandingPage(ISerializationContext context, LandingPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LinkItem returns LinkItem
	 *
	 * Constraint:
	 *     (name=ID text+=Items link+=URL)
	 */
	protected void sequence_LinkItem(ISerializationContext context, LinkItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sections returns Links
	 *     Links returns Links
	 *
	 * Constraint:
	 *     (name=ID links+=LinkItem*)
	 */
	protected void sequence_Links(ISerializationContext context, Links semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PageComponent returns PageBody
	 *     PageBody returns PageBody
	 *
	 * Constraint:
	 *     (name=ID sections+=Sections*)
	 */
	protected void sequence_PageBody(ISerializationContext context, PageBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PageComponent returns PageFooter
	 *     PageFooter returns PageFooter
	 *
	 * Constraint:
	 *     (name=ID links+=LinkItem*)
	 */
	protected void sequence_PageFooter(ISerializationContext context, PageFooter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PageComponent returns PageHeader
	 *     PageHeader returns PageHeader
	 *
	 * Constraint:
	 *     (name=ID title+=Items tabs+=TabItems*)
	 */
	protected void sequence_PageHeader(ISerializationContext context, PageHeader semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Path returns Path
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Path(ISerializationContext context, Path semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LPDSLPackage.Literals.PATH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LPDSLPackage.Literals.PATH__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PictureCarousel returns PictureCarousel
	 *     Sections returns PictureCarousel
	 *
	 * Constraint:
	 *     (name=ID timer+=TimeSpecifier picture+=Picture*)
	 */
	protected void sequence_PictureCarousel(ISerializationContext context, PictureCarousel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Picture returns Picture
	 *
	 * Constraint:
	 *     (name=ID imagepath+=ImagePath)
	 */
	protected void sequence_Picture(ISerializationContext context, Picture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResumeItems returns ResumeItems
	 *
	 * Constraint:
	 *     (name=ID title+=Items date+=Items description+=Items)
	 */
	protected void sequence_ResumeItems(ISerializationContext context, ResumeItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResumeSection returns ResumeSection
	 *
	 * Constraint:
	 *     (name=ID resumeitems+=ResumeItems*)
	 */
	protected void sequence_ResumeSection(ISerializationContext context, ResumeSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sections returns Resume
	 *     Resume returns Resume
	 *
	 * Constraint:
	 *     (name=ID resumesections+=ResumeSection*)
	 */
	protected void sequence_Resume(ISerializationContext context, Resume semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TabItems returns TabItems
	 *
	 * Constraint:
	 *     (name=ID description+=Description)
	 */
	protected void sequence_TabItems(ISerializationContext context, TabItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeSpecifier returns TimeSpecifier
	 *
	 * Constraint:
	 *     (name=ID time+=Integer)
	 */
	protected void sequence_TimeSpecifier(ISerializationContext context, TimeSpecifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URL returns URL
	 *
	 * Constraint:
	 *     (name=ID path+=Path)
	 */
	protected void sequence_URL(ISerializationContext context, URL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
