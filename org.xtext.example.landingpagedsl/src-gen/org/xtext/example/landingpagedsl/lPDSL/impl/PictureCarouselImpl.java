/**
 * generated by Xtext 2.23.0.M3
 */
package org.xtext.example.landingpagedsl.lPDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.landingpagedsl.lPDSL.LPDSLPackage;
import org.xtext.example.landingpagedsl.lPDSL.Picture;
import org.xtext.example.landingpagedsl.lPDSL.PictureCarousel;
import org.xtext.example.landingpagedsl.lPDSL.TimeSpecifier;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Picture Carousel</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.landingpagedsl.lPDSL.impl.PictureCarouselImpl#getTimer <em>Timer</em>}</li>
 *   <li>{@link org.xtext.example.landingpagedsl.lPDSL.impl.PictureCarouselImpl#getPicture <em>Picture</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PictureCarouselImpl extends SectionsImpl implements PictureCarousel
{
  /**
   * The cached value of the '{@link #getTimer() <em>Timer</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimer()
   * @generated
   * @ordered
   */
  protected EList<TimeSpecifier> timer;

  /**
   * The cached value of the '{@link #getPicture() <em>Picture</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPicture()
   * @generated
   * @ordered
   */
  protected EList<Picture> picture;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PictureCarouselImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LPDSLPackage.Literals.PICTURE_CAROUSEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TimeSpecifier> getTimer()
  {
    if (timer == null)
    {
      timer = new EObjectContainmentEList<TimeSpecifier>(TimeSpecifier.class, this, LPDSLPackage.PICTURE_CAROUSEL__TIMER);
    }
    return timer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Picture> getPicture()
  {
    if (picture == null)
    {
      picture = new EObjectContainmentEList<Picture>(Picture.class, this, LPDSLPackage.PICTURE_CAROUSEL__PICTURE);
    }
    return picture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LPDSLPackage.PICTURE_CAROUSEL__TIMER:
        return ((InternalEList<?>)getTimer()).basicRemove(otherEnd, msgs);
      case LPDSLPackage.PICTURE_CAROUSEL__PICTURE:
        return ((InternalEList<?>)getPicture()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LPDSLPackage.PICTURE_CAROUSEL__TIMER:
        return getTimer();
      case LPDSLPackage.PICTURE_CAROUSEL__PICTURE:
        return getPicture();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LPDSLPackage.PICTURE_CAROUSEL__TIMER:
        getTimer().clear();
        getTimer().addAll((Collection<? extends TimeSpecifier>)newValue);
        return;
      case LPDSLPackage.PICTURE_CAROUSEL__PICTURE:
        getPicture().clear();
        getPicture().addAll((Collection<? extends Picture>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LPDSLPackage.PICTURE_CAROUSEL__TIMER:
        getTimer().clear();
        return;
      case LPDSLPackage.PICTURE_CAROUSEL__PICTURE:
        getPicture().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LPDSLPackage.PICTURE_CAROUSEL__TIMER:
        return timer != null && !timer.isEmpty();
      case LPDSLPackage.PICTURE_CAROUSEL__PICTURE:
        return picture != null && !picture.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PictureCarouselImpl
